"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[4305],{4201:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"orchestration/chat-completion","title":"Chat Completion","description":"How to use the SAP Cloud SDK for AI to perform chat completion tasks using orchestration service from SAP AI Core.","source":"@site/docs-js/orchestration/chat-completion.mdx","sourceDirName":"orchestration","slug":"/orchestration/chat-completion","permalink":"/ai-sdk/docs/js/orchestration/chat-completion","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-js/orchestration/chat-completion.mdx","tags":[],"version":"current","frontMatter":{"id":"chat-completion","title":"Chat Completion","hide_title":false,"hide_table_of_contents":false,"description":"How to use the SAP Cloud SDK for AI to perform chat completion tasks using orchestration service from SAP AI Core.","keywords":["sap","cloud","sdk","ai","orchestration","chat","completion"]},"sidebar":"docsJsSidebar","previous":{"title":"Connecting to AI Core","permalink":"/ai-sdk/docs/js/connecting-to-ai-core"},"next":{"title":"Foundation Models","permalink":"/ai-sdk/docs/js/foundation-models/"}}');var i=t(4848),s=t(8453);const r={id:"chat-completion",title:"Chat Completion",hide_title:!1,hide_table_of_contents:!1,description:"How to use the SAP Cloud SDK for AI to perform chat completion tasks using orchestration service from SAP AI Core.",keywords:["sap","cloud","sdk","ai","orchestration","chat","completion"]},a=void 0,l={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Prompt Templating",id:"prompt-templating",level:2},{value:"LLM Configuration",id:"llm-configuration",level:3},{value:"Harmonized API",id:"harmonized-api",level:3},{value:"Template Configuration",id:"template-configuration",level:3},{value:"Prompt Registry",id:"prompt-registry",level:3},{value:"Local Prompt Template",id:"local-prompt-template",level:3},{value:"Function Calling",id:"function-calling",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Message History",id:"message-history",level:3},{value:"Image Recognition",id:"image-recognition",level:3},{value:"Content Filtering",id:"content-filtering",level:2},{value:"Azure Content Filter",id:"azure-content-filter",level:3},{value:"Prompt Attack Detection",id:"prompt-attack-detection",level:4},{value:"Llama Guard Filter",id:"llama-guard-filter",level:3},{value:"Data Masking",id:"data-masking",level:2},{value:"SAP Data Privacy Integration",id:"sap-data-privacy-integration",level:3},{value:"Grounding",id:"grounding",level:2},{value:"Translation",id:"translation",level:2},{value:"Use JSON Configuration from AI Launchpad",id:"use-json-configuration-from-ai-launchpad",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Streaming the Delta Content",id:"streaming-the-delta-content",level:3},{value:"Streaming with Tool Calls",id:"streaming-with-tool-calls",level:3},{value:"Streaming with Abort Controller",id:"streaming-with-abort-controller",level:3},{value:"Streaming Options",id:"streaming-options",level:3},{value:"Custom Deployment Configuration",id:"custom-deployment-configuration",level:2},{value:"Custom Request Configuration",id:"custom-request-configuration",level:2},{value:"Custom Destination",id:"custom-destination",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@sap-ai-sdk/orchestration"})," package provides a client for the orchestration service of SAP AI Core.\nThe orchestration service harmonizes the API of various generative AI models, enabling seamless integration and interaction with different models through a unified interface.\nAdditionally, it provides features like ",(0,i.jsx)(n.a,{href:"#templating",children:"templating"}),", ",(0,i.jsx)(n.a,{href:"#content-filtering",children:"content filtering"}),", ",(0,i.jsx)(n.a,{href:"#grounding",children:"grounding"})," and more to enhance the interaction with generative AI models."]}),"\n",(0,i.jsxs)(n.p,{children:["Find more details about orchestration workflow ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/orchestration-workflow",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ npm install @sap-ai-sdk/orchestration\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsxs)(n.p,{children:["Initialize a client with proper orchestration configuration for each module.\nBelow is an example for configuring the mandatory ",(0,i.jsx)(n.code,{children:"promptTemplating"})," module.\nIn addition, you can find more sample code ",(0,i.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-js/blob/main/sample-code/src/orchestration.ts",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { OrchestrationClient } from '@sap-ai-sdk/orchestration';\n\nconst orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here, the model name is specified along with a user message as the prompt."}),"\n",(0,i.jsxs)(n.p,{children:["To send a chat completion request, use the ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," method.\nUse the following convenience methods for handling chat completion response:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getContent()"})," parses the response and returns the model's output as a string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getFinishReason()"})," retrieves the ",(0,i.jsx)(n.code,{children:"finish_reason"})," explaining why chat completion request stopped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getTokenUsage()"})," provides token usage details, including ",(0,i.jsx)(n.code,{children:"total_tokens"}),", ",(0,i.jsx)(n.code,{children:"prompt_tokens"}),", and ",(0,i.jsx)(n.code,{children:"completion_tokens"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getAllMessages()"})," parses the response and returns a list of all messages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getAssistantMessage()"})," parses the response and returns the assistant message."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getToolCalls()"})," parses the response and returns a list of tool calls generated by the model."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getRefusal()"})," parses the response and returns the refusal message from the model."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const response = await orchestrationClient.chatCompletion({\n  messages: [\n    { role: 'user', content: 'Hello World! Why is this phrase so famous?' }\n  ]\n});\n\nconsole.log(response.getContent());\nconsole.log(response.getFinishReason());\nconsole.log(JSON.stringify(response.getTokenUsage()));\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following sections provide detailed configuration for each module."}),"\n",(0,i.jsx)(n.h2,{id:"prompt-templating",children:"Prompt Templating"}),"\n",(0,i.jsx)(n.h3,{id:"llm-configuration",children:"LLM Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Choose the LLM by setting the ",(0,i.jsx)(n.code,{children:"name"})," property in the ",(0,i.jsx)(n.code,{children:"promptTemplating.model"})," configuration.\nOptionally, define ",(0,i.jsx)(n.code,{children:"version"})," (default: ",(0,i.jsx)(n.code,{children:"latest"}),") and ",(0,i.jsx)(n.code,{children:"params"})," for custom settings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const promptTemplating = {\n  model: {\n    name: 'gpt-4o',\n    version: '2024-08-06', // optional\n    params: {\n      // optional\n      max_tokens: 50,\n      temperature: 0.1\n    }\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"harmonized-api",children:"Harmonized API"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/harmonized-api?locale=en-US",children:"Harmonized API"})," lets you use different foundation models without the need to change the client code.\nYou can switch from one LLM to another easily like the example below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Original config for using GPT 4o\n/*\nconst promptTemplating = {\n  model: {\n    name: 'gpt-4o'\n  }\n};\n*/\n\n// Switch to Claude 3.5 Sonnet\nconst promptTemplating = {\n  model: {\n    name: 'anthropic--claude-3.5-sonnet'\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Available LLMs on SAP Generative AI Hub",type:"tip",children:[(0,i.jsx)(n.p,{children:"Thanks to the harmonized API, all available LLMs on the SAP Generative AI Hub can be accessed through orchestration, including:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"OpenAI GPT 4o"}),"\n",(0,i.jsx)(n.li,{children:"OpenAI o1"}),"\n",(0,i.jsx)(n.li,{children:"OpenAI o3 mini"}),"\n",(0,i.jsx)(n.li,{children:"AWS Anthropic Claude"}),"\n",(0,i.jsx)(n.li,{children:"AWS Amazon Nova"}),"\n",(0,i.jsx)(n.li,{children:"GCP VertexAI Gemini"}),"\n",(0,i.jsx)(n.li,{children:"Mistral AI"}),"\n"]})]}),"\n",(0,i.jsxs)(n.p,{children:["Check the ",(0,i.jsx)(n.a,{href:"https://me.sap.com/notes/3437766",children:"SAP Notes"})," for all available LLMs on SAP Generative AI Hub."]}),"\n",(0,i.jsx)(n.h3,{id:"template-configuration",children:"Template Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Use the orchestration client with the ",(0,i.jsx)(n.code,{children:"promptTemplating.prompt.template"})," configuration to define a static prompt.\nThis prompt can include placeholders, which are replaced with values from ",(0,i.jsx)(n.code,{children:"placeholderValues"})," during a ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," method call.\nThis setup is useful when the base structure of your prompt remains the same across requests."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    },\n    prompt: {\n      template: [\n        { role: 'user', content: 'What is the capital of {{?country}}?' }\n      ]\n    }\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  placeholderValues: { country: 'France' }\n});\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"promptTemplating.prompt.template"})," messages defined in the client configuration are static - they are always included in every ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," request.\nFor more dynamic prompts, i.e., you want to vary the full message list per request without re-initializing the client, use the ",(0,i.jsx)(n.code,{children:"messages"})," property instead."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [{ role: 'user', content: 'What is the capital of {{?country}}?' }],\n  placeholderValues: { country: 'France' }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"prompt-registry",children:"Prompt Registry"}),"\n",(0,i.jsxs)(n.p,{children:["You can define template content within the templating configuration, or refer to a template defined in the ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/prompt-registry",children:"Prompt Registry"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    },\n    prompt: {\n      template_ref: {\n        name: 'my-get-capital-template',\n        scenario: 'my-scenario',\n        version: '0.0.1'\n      }\n    }\n  }\n});\n\nconst response = orchestrationClient.chatCompletion({\n  placeholderValues: { country: 'France' }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A prompt template can be referenced either by ID, or by a combination of name, scenario and version.\nFor details on storing a template in the Prompt Registry, refer to ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/create-prompt-template-imperative",children:"this guide"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"local-prompt-template",children:"Local Prompt Template"}),"\n",(0,i.jsxs)(n.p,{children:["You can define the template in a YAML file and pass its content as a string to the ",(0,i.jsx)(n.code,{children:"promptTemplating.prompt"})," property.\nThis is useful for testing a prompt template locally before storing it in the ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/prompt-registry",children:"Prompt Registry"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { readFileSync } from 'fs';\nimport { OrchestrationClient } from '@sap-ai-sdk/orchestration';\n\n// Read the YAML file containing the prompt template\nconst yamlTemplate = readFileSync('./path/to/prompt-template.yaml', 'utf-8');\n\nconst orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    },\n    prompt: yamlTemplate\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  placeholderValues: { country: 'France' }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"The YAML string is parsed and validated against the expected schema.\nIf the YAML is invalid or does not conform to the schema, an error will be thrown."}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/create-prompt-template-declarative#procedure",children:"section"})," shows the format in which a prompt template can be defined."]}),"\n",(0,i.jsx)(n.h3,{id:"function-calling",children:"Function Calling"}),"\n",(0,i.jsxs)(n.p,{children:["Define and pass ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/tool-calling",children:"tool definitions"})," to enable the model to call specific functions.\nHere's an example of temperature conversion using tool calls:"]}),"\n",(0,i.jsxs)(n.p,{children:["First, define the tool with ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"description"})," and ",(0,i.jsx)(n.code,{children:"parameters"})," properties:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const convertTemperatureTool: ChatCompletionTool = {\n  type: 'function',\n  function: {\n    name: 'convert_temperature_to_fahrenheit',\n    description: 'Converts temperature from Celsius to Fahrenheit',\n    parameters: {\n      type: 'object',\n      properties: {\n        temperature: {\n          type: 'number',\n          description: 'The temperature value in Celsius to convert.'\n        }\n      },\n      required: ['temperature']\n    }\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Set ",(0,i.jsx)(n.code,{children:"strict"})," to ",(0,i.jsx)(n.code,{children:"true"})," to ensure function calls adhere to the function schema.\nFor more information refer to Orchestration ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/tool-calling",children:"Tool Calling"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Initialize the client and send the initial request with the tool definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const client = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    },\n    prompt: {\n      tools: [convertTemperatureTool]\n    }\n  }\n});\n\nconst response = await client.chatCompletion({\n  messages: [\n    { role: 'user', content: 'Convert 20 degrees Celsius to Fahrenheit.' }\n  ]\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"When the model decides to use a tool, it returns the function name and input arguments in the response.\nUse the model response to execute the function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const initialResponse = response.getAssistantMessage();\nlet toolMessage: ToolChatMessage;\n\nif (initialResponse & initialResponse.tool_calls) {\n  const toolCall = initialResponse.tool_calls[0];\n  const name = toolCall.function.name;\n  const args = JSON.parse(toolCall.function.arguments);\n\n  // Execute the function with the provided arguments\n  const toolResult = callFunction(name, args);\n\n  toolMessage: ToolChatMessage = {\n    role: 'tool',\n    content: toolResult,\n    tool_call_id: toolCall.id\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"callFunction"})," function routes the calls to the actual function implementations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function callFunction(name: string, args: any): string {\n  switch (name) {\n    case 'convert_temperature_to_fahrenheit':\n      return convertTemperatureToFahrenheit(args.temperature);\n    default:\n      throw new Error(`Function: ${name} not found!`);\n  }\n}\n\nfunction convertTemperatureToFahrenheit(temperature: number): string {\n  return `The temperature in Fahrenheit is ${(temperature * 9) / 5 + 32}\xb0F.`;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Send the function result back to the model to get it's final response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const finalResponse = await client.chatCompletion({\n  messages: [toolMessage],\n  messagesHistory: response.getAllMessages()\n});\n\nconsole.log(finalResponse.getContent());\n"})}),"\n",(0,i.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,i.jsxs)(n.p,{children:["For general response formatting, use the ",(0,i.jsx)(n.code,{children:"response_format"})," parameter.\nIt is useful when model is ",(0,i.jsx)(n.strong,{children:"not calling a tool"})," and should still return a structured response."]}),"\n",(0,i.jsxs)(n.p,{children:["The example below returns a JSON Schema with ",(0,i.jsx)(n.code,{children:"strict"})," set to ",(0,i.jsx)(n.code,{children:"true"})," to let the response adhere to the schema definition."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const templating: TemplatingModuleConfig = {\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'capital_response',\n      strict: true,\n      schema: {\n        type: 'object',\n        properties: {\n          country_name: {\n            type: 'string',\n            description: 'The name of the country provided by the user.'\n          },\n          capital: {\n            type: 'string',\n            description: 'The capital city of the country.'\n          }\n        },\n        required: ['country_name', 'capital']\n      }\n    }\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also define JSON schema using ",(0,i.jsx)(n.a,{href:"https://zod.dev/",children:"Zod"})," schema as shown below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import * as z from 'zod/v4';\nimport { toJsonSchema } from '@langchain/core/utils/json_schema';\nimport { ResponseFormatJsonSchema } from '@sap-ai-sdk/orchestration';\n\nconst countryCapitalSchema = z\n  .object({\n    country_name: z.string(),\n    capital: z.string()\n  })\n  .strict();\n\nconst response_format: ResponseFormatJsonSchema = {\n  type: 'json_schema',\n  json_schema: {\n    name: 'capital_response',\n    strict: true,\n    schema: toJsonSchema(countryCapitalSchema)\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"message-history",children:"Message History"}),"\n",(0,i.jsx)(n.p,{children:"The orchestration service supports chat completion with message history.\nThis allows the model to remember previous messages in the conversation, enabling a more coherent and context-aware interaction."}),"\n",(0,i.jsxs)(n.p,{children:["Provide the message history in the ",(0,i.jsx)(n.code,{children:"messagesHistory"})," parameter when calling the ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [{ role: 'user', content: 'What is my name?' }],\n  messagesHistory: [\n    {\n      role: 'system',\n      content:\n        'You are a helpful assistant who remembers all details the user shares with you.'\n    },\n    {\n      role: 'user',\n      content: 'Hi! Im Bob'\n    },\n    {\n      role: 'assistant',\n      content:\n        \"Hi Bob, nice to meet you! I'm an AI assistant. I'll remember that your name is Bob as we continue our conversation.\"\n    }\n  ]\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"image-recognition",children:"Image Recognition"}),"\n",(0,i.jsx)(n.p,{children:"Many models in the orchestration service have image recognition capabilities, meaning the models can take images as input and answer questions about them."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"image_url"})," content type can only be used in messages with ",(0,i.jsx)(n.code,{children:"role: 'user'"}),".\nAttempting to use ",(0,i.jsx)(n.code,{children:"image_url"})," in non-user messages will result in an error."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [\n    {\n      role: 'user', // only user role supports image_url\n      content: [\n        {\n          type: 'text',\n          text: 'What is the content of the image?'\n        },\n        {\n          type: 'image_url',\n          image_url: {\n            url: '{{?imageUrl}}'\n          }\n        }\n      ]\n    }\n  ],\n  placeholderValues: {\n    imageUrl: 'IMAGE_URL'\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IMAGE_URL"})," can either be a public URL or a base64 encoded image, e.g., ",(0,i.jsx)(n.code,{children:"data:image/jpeg;base64,..."}),".\nYou can send a single chat completion request with multiple images by defining multiple content blocks with ",(0,i.jsx)(n.code,{children:"image_url"})," type in the template.\nThe model will process each image and use the information from all of them to respond."]}),"\n",(0,i.jsx)(n.h2,{id:"content-filtering",children:"Content Filtering"}),"\n",(0,i.jsx)(n.p,{children:"Configure content filtering to restrict content that is passed to and received from a generative AI model."}),"\n",(0,i.jsxs)(n.p,{children:["This feature allows filtering both ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/input-filtering",children:"input"})," and ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/output-filtering",children:"output"})," of a model based on content safety criteria."]}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to use content filtering with the orchestration client.\nSee the sections below for details on the available content filters and how to build them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const inputFilter: InputFilterConfig = ... // Use a build function to create an input content filter\nconst outputFilter: OutputFilterConfig = ... // Use a build function to create an output content filter\n\nconst orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  },\n  filtering: {\n    input: {\n      filters: [inputFilter] // Multiple filters can be applied\n    },\n    output: {\n      filters: [outputFilter]\n    }\n  }\n});\n\ntry {\n  const response = await orchestrationClient.chatCompletion({\n    messages: [{ role: 'user', content: 'I hate you!' }]\n  });\n  console.log(response.getContent());\n} catch (error: any) {\n  console.error(error.message);\n  console.error(error.cause?.response?.data);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Multiple filters can be applied at the same time for both input and output filtering."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," method can throw an error with HTTP status code ",(0,i.jsx)(n.code,{children:"400"})," if content filters hit.\nIn case of a ",(0,i.jsx)(n.code,{children:"200"})," HTTP response, the ",(0,i.jsx)(n.code,{children:"getContent()"})," method can throw an error if the output filters hit.\nSee the ",(0,i.jsx)(n.a,{href:"../error-handling",children:"Error Handling"})," page for more details."]})}),"\n",(0,i.jsx)(n.h3,{id:"azure-content-filter",children:"Azure Content Filter"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"buildAzureContentSafetyFilter()"})," function to build an Azure content filter.\nInput and output filters are differentiated.\nSet the ",(0,i.jsx)(n.code,{children:"type"})," parameter to ",(0,i.jsx)(n.code,{children:"input"})," to build input filter configuration and ",(0,i.jsx)(n.code,{children:"output"})," to build output filter configuration.\nEach category of the filter can be assigned a specific severity level, which corresponds to an Azure threshold value."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Severity Level"}),(0,i.jsx)(n.th,{children:"Azure Threshold Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ALLOW_SAFE"})}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ALLOW_SAFE_LOW"})}),(0,i.jsx)(n.td,{children:"2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ALLOW_SAFE_LOW_MEDIUM"})}),(0,i.jsx)(n.td,{children:"4"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ALLOW_ALL"})}),(0,i.jsx)(n.td,{children:"6"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"prompt-attack-detection",children:"Prompt Attack Detection"}),"\n",(0,i.jsx)(n.p,{children:"A prompt attack is a malicious input that is designed to bypass a model's safety mechanisms or override previous instructions.\nPrompt attacks can lead to the generation of harmful content or the execution of malicious actions."}),"\n",(0,i.jsxs)(n.p,{children:["The Azure Content Safety service also supports prompt attack detection for input text via a prompt shield configuration.\nSet the ",(0,i.jsx)(n.code,{children:"prompt_shield"})," property to ",(0,i.jsx)(n.code,{children:"true"})," to enable the detection.\nThis option is only available for input filters.\nFor more information, refer to ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/ai-services/content-safety/concepts/jailbreak-detection",children:"Prompt Shields in Azure AI Content Safety"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { buildAzureContentSafetyFilter } from '@sap-ai-sdk/orchestration';\n\nconst inputFilter = buildAzureContentSafetyFilter('input', {\n  hate: 'ALLOW_SAFE_LOW',\n  violence: 'ALLOW_SAFE_LOW_MEDIUM',\n  prompt_shield: true\n});\n\nconst outputFilter = buildAzureContentSafetyFilter('output', {\n  hate: 'ALLOW_SAFE',\n  violence: 'ALLOW_SAFE_LOW_MEDIUM'\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"llama-guard-filter",children:"Llama Guard Filter"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"buildLlamaGuard38BFilter()"})," function to build a Llama Guard 3 8B content filter.\nInput and output filters are differentiated.\nSet the ",(0,i.jsx)(n.code,{children:"type"})," parameter to ",(0,i.jsx)(n.code,{children:"input"})," to build input filter configuration and ",(0,i.jsx)(n.code,{children:"output"})," to build output filter configuration."]}),"\n",(0,i.jsx)(n.p,{children:"Available categories can be found with autocompletion.\nPass the categories as an array to the function to enable them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { buildLlamaGuard38BFilter } from '@sap-ai-sdk/orchestration';\n\nconst inputFilter = buildLlamaGuard38BFilter('input', ['self_harm']);\nconst outputFilter = buildLlamaGuard38BFilter('output', [\n  'self_harm',\n  'violence'\n]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-masking",children:"Data Masking"}),"\n",(0,i.jsx)(n.p,{children:"Use the orchestration client with the masking module to mask sensitive information in the prompt while preserving necessary context for the generative AI model."}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to use data masking with the orchestration client.\nSee the sections below for details on the available masking providers and how to build them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const maskingProvider: MaskingProviderConfig = ... // Use a build function to create a masking provider\n\nconst orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  },\n  masking: {\n    masking_providers: [maskingProvider] // Multiple masking providers can be applied\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [\n    {\n      role: 'user',\n      content:\n        'Please write an email to {{?user}} ({{?email}}) about the amazing capabilities of SAP AI Core!'\n    }\n  ],\n  placeholderValues: { user: 'Jane Doe', email: 'jane.doe@example.com' }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sap-data-privacy-integration",children:"SAP Data Privacy Integration"}),"\n",(0,i.jsxs)(n.p,{children:['Orchestration service offers a masking provider "SAP Data Privacy Integration (DPI)" to anonymize or pseudonymize sensitive information.\nUse ',(0,i.jsx)(n.code,{children:"buildDpiMaskingProvider()"})," function to build a DPI masking provider with standard or custom entities.\nProvide regular expression to match a custom entity.\nConfigure ",(0,i.jsx)(n.code,{children:"replacement_strategy"})," to control how entities are masked.\nSet method to ",(0,i.jsx)(n.code,{children:"constant"})," to replace an entity with the specified value followed by an incrementing number.\nSet method to ",(0,i.jsx)(n.code,{children:"fabricated_data"})," to replace an entity with a randomly generated value appropriate to its type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const maskingProvider = buildDpiMaskingProvider({\n  method: 'annonymization',\n  entities: [\n    'profile-person',\n    {\n      type: 'profile-email',\n      replacement_strategy: {\n        method: 'fabricated_data'\n      }\n    },\n    {\n      type: 'custom',\n      regex: '\\\\b[0-9]{4}-[0-9]{4}-[0-9]{3,5}\\\\b',\n      replacement_strategy: {\n        method: 'constant',\n        value: 'REDACTED_ID'\n      }\n    }\n  ],\n  // mask_grounding_input: false, // optional\n  allowlist: ['SAP'] // optional\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"allowlist"})," property specifies terms which will be kept unmasked.\nSet ",(0,i.jsx)(n.code,{children:"mask_grounding_input"})," to ",(0,i.jsx)(n.code,{children:"true"})," to mask ",(0,i.jsx)(n.a,{href:"#grounding",children:"Grounding"})," input as well."]}),"\n",(0,i.jsx)(n.h2,{id:"grounding",children:"Grounding"}),"\n",(0,i.jsxs)(n.p,{children:["Grounding enables integrating external, contextually relevant, domain-specific, or real-time data into AI processes.\nUse ",(0,i.jsx)(n.code,{children:"buildDocumentGroundingConfig()"})," function to build configuration for document grounding service."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  },\n  grounding: buildDocumentGroundingConfig({\n    placeholders: {\n      input: ['groundingRequest'],\n      output: 'groundingOutput'\n    },\n    // metadata_params: ['PARAM_NAME']\n    filters: [\n      {\n        id: 'FILTER_ID',\n        // data_repository_type: 'vector', // optional, default to 'vector'\n        data_repositories: ['REPOSITORY_ID']\n      }\n    ]\n  })\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [\n    {\n      role: 'user',\n      content:\n        'UserQuestion: {{?groundingRequest}} Context: {{?groundingOutput}}'\n    }\n  ],\n  placeholderValues: {\n    groundingRequest: 'Give me a short introduction of SAP AI Core.'\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, the optional filter property ",(0,i.jsx)(n.code,{children:"data_repository_type"})," is set to ",(0,i.jsx)(n.code,{children:"vector"}),".\nSet it to ",(0,i.jsx)(n.code,{children:"help.sap.com"})," to retrieve context from the SAP Help Portal."]}),"\n",(0,i.jsxs)(n.p,{children:["Set ",(0,i.jsx)(n.code,{children:"metadata_params"})," property with an array of parameter names to include ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/metadata",children:"Metadata"})," in the grounding result, which can be mentioned when writing the prompt.\nIf set the value to ",(0,i.jsx)(n.code,{children:"'*'"}),", all metadata will be included."]}),"\n",(0,i.jsxs)(n.p,{children:["Set ",(0,i.jsx)(n.code,{children:"data_repositories"})," property with an array of repository IDs to search in specific data repositories.\nSkip this property to search in all available data repositories."]}),"\n",(0,i.jsx)(n.h2,{id:"translation",children:"Translation"}),"\n",(0,i.jsx)(n.p,{children:"The translation module translates content sent to and received from a generative AI model into a chosen target language."}),"\n",(0,i.jsxs)(n.p,{children:["The module supports SAP's Document Translation service and allows translating both ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/input-translation",children:"input"})," and ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/output-translation",children:"output"})," of a model.\nThe target language is mandatory, while source language will be auto-detected if not provided."]}),"\n",(0,i.jsxs)(n.p,{children:["For available translation options, consult the ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/translation-hub/sap-translation-hub/supported-languages-6854bbb1bd824ffebc3a097a7c0fd45d",children:"list of supported languages"})," to identify compatible language pairs.\nInput and output translation configurations are differentiated.\nSet the ",(0,i.jsx)(n.code,{children:"type"})," parameter to ",(0,i.jsx)(n.code,{children:"input"})," to build the input configuration and ",(0,i.jsx)(n.code,{children:"output"})," to build the output configuration."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const inputTranslation = buildTranslationConfig('input', {\n  sourceLanguage: 'en-US',\n  targetLanguage: 'de-DE'\n});\n\nconst outputTranslation = buildTranslationConfig('output', {\n  sourceLanguage: 'en-US',\n  targetLanguage: 'de-DE'\n});\n\nconst orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  },\n  translation: {\n    input: inputTranslation,\n    output: outputTranslation\n  }\n});\n\nconst response = await orchestrationClient.chatCompletion({\n  messages: [\n    {\n      role: 'user',\n      content: 'Write an abstract for a thriller playing at SAP headquarters.'\n    }\n  ]\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-json-configuration-from-ai-launchpad",children:"Use JSON Configuration from AI Launchpad"}),"\n",(0,i.jsx)(n.p,{children:"If you already have an orchestration workflow created in your SAP AI Launchpad instance, you can either download the configuration as a JSON file or copy the JSON string in code to configure the orchestration client."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const jsonConfig = await fs.promises.readFile(\n  'path/to/orchestration-config.json',\n  'utf-8'\n);\n// Alternatively, you can provide the JSON string in code directly.\n// const jsonConfig = 'YOUR_JSON_CONFIG'\n\nconst orchestrationClient = new OrchestrationClient(jsonConfig);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"streaming",children:"Streaming"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"OrchestrationClient"})," supports streaming responses for chat completion requests based on the ",(0,i.jsx)(n.a,{href:"https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events",children:"Server-sent events"})," standard."]}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"stream()"})," method to receive a stream of chunk responses from the model.\nAfter consuming the stream, call the helper methods to get the finish reason and token usage information."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const response = await orchestrationClient.stream({\n  placeholderValues: { country: 'France' }\n});\n\nfor await (const chunk of response.stream) {\n  console.log(JSON.stringify(chunk));\n}\n\nconst finishReason = response.getFinishReason();\nconst tokenUsage = response.getTokenUsage();\n\nconsole.log(`Finish reason: ${finishReason}\\n`);\nconsole.log(`Token usage: ${JSON.stringify(tokenUsage)}\\n`);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-the-delta-content",children:"Streaming the Delta Content"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"toContentStream()"})," method to create a stream generating delta content string."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"for await (const chunk of response.stream.toContentStream()) {\n  console.log(chunk); // will log the delta content\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-with-tool-calls",children:"Streaming with Tool Calls"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"getToolCalls()"})," method to get the tool calls at the end of a stream.\nWhile ",(0,i.jsx)(n.code,{children:"getDeltaToolCalls()"})," method can be called on individual chunks, partial tool calls are typically not useful.\nTherefore, it is recommended to use the ",(0,i.jsx)(n.code,{children:"getToolCalls()"})," method on the full response instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"for await (const _ of response.stream) {\n  console.log('Waiting for the stream to end ...');\n}\n\nconst toolCalls = response.getToolCalls();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-with-abort-controller",children:"Streaming with Abort Controller"}),"\n",(0,i.jsxs)(n.p,{children:["Streaming request can be aborted using the ",(0,i.jsx)(n.code,{children:"AbortController"})," API.\nIn case of an error, SAP Cloud SDK for AI will automatically close the stream.\nIt can also be manually aborted if an ",(0,i.jsx)(n.code,{children:"AbortSignal"})," object was provided when calling the ",(0,i.jsx)(n.code,{children:"stream()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient({\n  promptTemplating: {\n    model: {\n      name: 'gpt-4o'\n    }\n  }\n});\n\nconst controller = new AbortController();\nconst response = await orchestrationClient.stream(\n  {\n    messages: [\n      { role: 'user', content: 'Give a long history of {{?country}}?' }\n    ],\n    placeholderValues: { country: 'France' }\n  },\n  controller.signal\n);\n\n// Abort the streaming request after one second\nsetTimeout(() => {\n  controller.abort();\n}, 1000);\n\nfor await (const chunk of response.stream) {\n  console.log(JSON.stringify(chunk));\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"In this example, streaming request will be aborted after one second.\nAbort controller can be useful, e.g., when end-user wants to stop the stream or refreshes the page."}),"\n",(0,i.jsx)(n.h3,{id:"streaming-options",children:"Streaming Options"}),"\n",(0,i.jsxs)(n.p,{children:["The orchestration service offers multiple streaming options, which you can configure in addition to the LLM streaming options.\nThese include options like defining the maximum number of characters per chunk or modifying the output filter behavior.\nThere are two ways to add specific streaming options to your client, either at initialization of orchestration client, or when calling the ",(0,i.jsx)(n.code,{children:"stream()"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["You can check the list of available stream options ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/streaming",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Below is an example for setting the streaming options when calling the ",(0,i.jsx)(n.code,{children:"stream()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const response = orchestrationClient.stream(\n  {\n    messages: [\n      { role: 'user', content: 'Give a long history of {{?country}}?' }\n    ],\n    placeholderValues: { country: 'France' }\n  },\n  controller,\n  {\n    llm: { include_usage: false },\n    global: { chunk_size: 10 },\n    outputFiltering: { overlap: 200 }\n  }\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Set the ",(0,i.jsx)(n.code,{children:"include_usage"})," property to ",(0,i.jsx)(n.code,{children:"false"})," if usage metrics should not be returned by default.\nSet the ",(0,i.jsx)(n.code,{children:"llm"})," property to ",(0,i.jsx)(n.code,{children:"null"})," to not send any LLM streaming options."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"When initializing a client with JSON module config, it is not possible to provide streaming options."})}),"\n",(0,i.jsx)(n.h2,{id:"custom-deployment-configuration",children:"Custom Deployment Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["By default, there should be an orchestration deployment in the ",(0,i.jsx)(n.code,{children:"default"})," ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/resource-groups",children:"Resource Group"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the orchestration service has been deployed in a different resource group, it is possible to specify the resource group name in the ",(0,i.jsx)(n.code,{children:"resourceGroup"})," property when creating the client."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient(orchestrationConfig, {\n  resourceGroup: 'my-custom-resource-group'\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, it is possible to manually specify a deployment ID using the ",(0,i.jsx)(n.code,{children:"deploymentId"})," property instead of letting the SDK resolve it.\nMake sure to set a correct resource group, in which the deployment was created."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient(orchestrationConfig, {\n  deploymentId: 'my-custom-deployment-id'\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Refer to ",(0,i.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/create-deployment-for-orchestration",children:"Create a Deployment for Orchestration"})," for more details on how to create and manage deployments for orchestration."]}),"\n",(0,i.jsx)(n.h2,{id:"custom-request-configuration",children:"Custom Request Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Set custom request configuration in the ",(0,i.jsx)(n.code,{children:"requestConfig"})," parameter when calling the ",(0,i.jsx)(n.code,{children:"chatCompletion()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const response = await orchestrationClient.chatCompletion(\n  {\n    ...\n  },\n  {\n    headers: {\n      'x-custom-header': 'custom-value'\n      // Add more headers here\n    },\n    params: {\n      // Add more parameters here\n    }\n    // Add more request configuration here\n  }\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-destination",children:"Custom Destination"}),"\n",(0,i.jsxs)(n.p,{children:["When initializing the client, it is possible to provide a custom destination.\nFor example, when targeting a destination with the name ",(0,i.jsx)(n.code,{children:"my-destination"}),", the following code can be used:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const orchestrationClient = new OrchestrationClient(\n  orchestrationConfig,\n  deploymentConfig,\n  {\n    destinationName: 'my-destination'\n  }\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, the fetched destination is cached.\nTo disable caching, set the ",(0,i.jsx)(n.code,{children:"useCache"})," parameter to ",(0,i.jsx)(n.code,{children:"false"})," together with the ",(0,i.jsx)(n.code,{children:"destinationName"})," parameter."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about configuring a destination, refer to the ",(0,i.jsx)(n.a,{href:"../connecting-to-ai-core#using-a-destination",children:"Using a Destination"})," section."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);