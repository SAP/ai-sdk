"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[9818],{1834:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorials/getting-started-with-agents/openai-langchain","title":"Getting Started with Agents using LangChain OpenAI","description":"Building a Travel Itinerary Assistant with LangGraph and LangChain OpenAI Client","source":"@site/docs-js/tutorials/getting-started-with-agents/openai-langchain.mdx","sourceDirName":"tutorials/getting-started-with-agents","slug":"/tutorials/getting-started-with-agents/openai-langchain","permalink":"/ai-sdk/docs/js/tutorials/getting-started-with-agents/openai-langchain","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-js/tutorials/getting-started-with-agents/openai-langchain.mdx","tags":[],"version":"current","frontMatter":{"id":"openai-langchain","title":"Getting Started with Agents using LangChain OpenAI","sidebar_label":"LangChain OpenAI","description":"Building a Travel Itinerary Assistant with LangGraph and LangChain OpenAI Client","keywords":["tutorial","agents","langgraph","openai"]},"sidebar":"docsJsSidebar","previous":{"title":"Prompt Registry","permalink":"/ai-sdk/docs/js/ai-core/prompt-registry"},"next":{"title":"Error Handling","permalink":"/ai-sdk/docs/js/error-handling"}}');var s=t(4848),i=t(8453);const r={id:"openai-langchain",title:"Getting Started with Agents using LangChain OpenAI",sidebar_label:"LangChain OpenAI",description:"Building a Travel Itinerary Assistant with LangGraph and LangChain OpenAI Client",keywords:["tutorial","agents","langgraph","openai"]},o="Introduction",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Define Mock Tools",id:"define-mock-tools",level:2},{value:"Setup the Agent",id:"setup-the-agent",level:2},{value:"Define Agent Logic and LangGraph Flow",id:"define-agent-logic-and-langgraph-flow",level:2},{value:"Run the assistant",id:"run-the-assistant",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, you'll build a simple travel assistant agent using the LangChain OpenAI Client (",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"}),") from the ",(0,s.jsx)(n.code,{children:"@sap-ai-sdk/langchain"})," package alongside ",(0,s.jsx)(n.code,{children:"LangGraph"}),".\nThe agent creates an itinerary based on current weather conditions and supports follow-up queries."]}),"\n",(0,s.jsx)(n.p,{children:"The assistant performs these steps:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accepts a user travel request."}),"\n",(0,s.jsx)(n.li,{children:"Calls a weather tool to get the current weather for the city."}),"\n",(0,s.jsx)(n.li,{children:"Generates a weather-aware 3-item itinerary."}),"\n",(0,s.jsx)(n.li,{children:"Handles follow-up questions like restaurant recommendations using conversation memory."}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["Refer to prerequisites outlined ",(0,s.jsx)(n.a,{href:"../overview-cloud-sdk-for-ai-js#prerequisites",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This tutorial assumes you have a basic understanding of TypeScript, LLMs and LangChain concepts."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Install the following dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @sap-ai-sdk/langchain langchain @langchain/langgraph @langchain/core zod\n"})}),"\n",(0,s.jsx)(n.h2,{id:"define-mock-tools",children:"Define Mock Tools"}),"\n",(0,s.jsx)(n.p,{children:"Define two custom tools for weather and restaurant data."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get_weather"})," for returning weather by city"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get_restaurants"})," for city-based restaurant recommendations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { tool } from '@langchain/core/tools';\nimport { z } from 'zod';\n\nconst mockWeatherData: Record<\n  string,\n  { temperature: string; condition: string }\n> = {\n  paris: { temperature: '22\xb0C', condition: 'Mild and pleasant' },\n  reykjavik: { temperature: '3\xb0C', condition: 'Cold and windy' }\n};\n\nconst mockRestaurantData: Record<string, string[]> = {\n  paris: ['Le Comptoir du Relais', \"L'As du Fallafel\", 'Breizh Caf\xe9'],\n  reykjavik: ['Dill Restaurant', 'Fish Market', 'Grillmarka\xf0urinn']\n};\n\nconst getWeatherTool = tool(\n  async ({ city }) => {\n    const weather = mockWeatherData[city.toLowerCase()];\n    return weather\n      ? `Current weather in ${city}: ${weather.temperature}, ${weather.condition}`\n      : `Weather data not available for ${city}.`;\n  },\n  {\n    name: 'get_weather',\n    description: 'Get current weather information for a city',\n    schema: z.object({ city: z.string().describe('The city name') })\n  }\n);\n\nconst getRestaurantsTool = tool(\n  async ({ city }) => {\n    const restaurants = mockRestaurantData[city.toLowerCase()];\n    return restaurants\n      ? `Popular restaurants in ${city}: ${restaurants.join(', ')}`\n      : `No restaurant data available for ${city}.`;\n  },\n  {\n    name: 'get_restaurants',\n    description: 'Get restaurant recommendations for a city',\n    schema: z.object({ city: z.string().describe('The city name') })\n  }\n);\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"This example uses mocked data for simplicity.\nReplace the tools' implementation with real API calls to integrate live data."})}),"\n",(0,s.jsx)(n.h2,{id:"setup-the-agent",children:"Setup the Agent"}),"\n",(0,s.jsxs)(n.p,{children:["Initialize the ",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"})," and add tools using the ",(0,s.jsx)(n.code,{children:"buildTools()"})," method.\nSet up a ",(0,s.jsx)(n.code,{children:"ToolNode"})," for routing tool calls."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { AzureOpenAiChatClient } from '@sap-ai-sdk/langchain';\nimport { ToolNode } from '@langchain/langgraph/prebuilt';\n\nconst tools = [getWeatherTool, getRestaurantsTool];\n\nconst model = new AzureOpenAiChatClient({\n  modelName: 'gpt-4o',\n  temperature: 0.7\n}).bindTools(tools);\n\nconst toolNode = new ToolNode(tools);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"define-agent-logic-and-langgraph-flow",children:"Define Agent Logic and LangGraph Flow"}),"\n",(0,s.jsxs)(n.p,{children:["Configure a ",(0,s.jsx)(n.code,{children:"StateGraph"})," that routes between ",(0,s.jsx)(n.code,{children:"agent"})," \u2192 ",(0,s.jsx)(n.code,{children:"tool"})," \u2192 ",(0,s.jsx)(n.code,{children:"agent"}),", and ends when no more tool calls are needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  StateGraph,\n  MessagesAnnotation,\n  MemorySaver,\n  START\n} from '@langchain/langgraph';\nimport { AIMessage } from '@langchain/core/messages';\n\nfunction shouldContinue({ messages }: typeof MessagesAnnotation.State) {\n  const lastMessage = messages[messages.length - 1] as AIMessage;\n  return lastMessage.tool_calls?.length ? 'tools' : '__end__';\n}\n\nasync function callModel(state: typeof MessagesAnnotation.State) {\n  const response = await model.invoke(state.messages);\n  return { messages: [response] };\n}\n\nconst workflow = new StateGraph(MessagesAnnotation)\n  .addNode('agent', callModel)\n  .addEdge(START, 'agent')\n  .addNode('tools', toolNode)\n  .addEdge('tools', 'agent')\n  .addConditionalEdges('agent', shouldContinue);\n\nconst memory = new MemorySaver();\nconst app = workflow.compile({ checkpointer: memory });\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraphjs/how-tos/persistence/?h=memory+saver#add-memory",children:(0,s.jsx)(n.code,{children:"MemorySaver"})})," allows sharing context across multiple interactions in a single conversational thread (",(0,s.jsx)(n.code,{children:"conv-1"}),").\nIn this example, it enables the agent to remember the previously mentioned city."]})}),"\n",(0,s.jsx)(n.h2,{id:"run-the-assistant",children:"Run the assistant"}),"\n",(0,s.jsx)(n.p,{children:"The following example simulates a conversation:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The assistant receives an itinerary request."}),"\n",(0,s.jsx)(n.li,{children:"It retrieves the weather before generating a plan."}),"\n",(0,s.jsx)(n.li,{children:"A follow-up message requests restaurant recommendations for the same city."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { HumanMessage, SystemMessage } from '@langchain/core/messages';\n\nconst config = { configurable: { thread_id: 'conv-1' } };\n\nasync function runTravelAssistant() {\n  // Initial system prompt and user message\n  let messages = [\n    new SystemMessage(\n      'You are a helpful travel assistant. Create a short, practical 3-item itinerary based on the city. Always check the weather before suggesting an itinerary.'\n    ),\n    new HumanMessage(\n      \"I'm traveling to Paris. Can you help me prepare an itinerary?\"\n    )\n  ];\n\n  // First interaction - triggers weather tool and itinerary generation\n  let response = await app.invoke({ messages }, config);\n  console.log('Assistant:', response.messages[response.messages.length - 1]);\n\n  // Continue conversation - add restaurant question\n  messages = [new HumanMessage('Can you also recommend some restaurants?')];\n\n  // Second interaction - should remember Paris and call restaurant tool\n  response = await app.invoke({ messages }, config);\n  console.log('Assistant:', response.messages[response.messages.length - 1]);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This tutorial demonstrates how to implement a simple agent workflow using:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"})," with ",(0,s.jsx)(n.code,{children:"bindTools()"})," method to integrate external capabilities."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"StateGraph"})," to manage agent-tool flow and decisions, and ",(0,s.jsx)(n.code,{children:"MemorySaver"})," for multi-turn memory retention."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Explore additional capabilities and patterns in ",(0,s.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraphjs/tutorials/quickstart/",children:"LangGraph documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);