"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[3107],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},9690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/agentic-workflows","title":"Getting Started with Agentic Workflows","description":"A tutorial on how to build agentic workflows using the SAP AI SDK.","source":"@site/docs-java/tutorials/agentic-workflows.mdx","sourceDirName":"tutorials","slug":"/tutorials/agentic-workflows","permalink":"/ai-sdk/docs/java/tutorials/agentic-workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-java/tutorials/agentic-workflows.mdx","tags":[],"version":"current","frontMatter":{"id":"agentic-workflows","title":"Getting Started with Agentic Workflows","hide_title":false,"hide_table_of_contents":false,"description":"A tutorial on how to build agentic workflows using the SAP AI SDK.","keywords":["sap","ai","sdk","cloud","orchestration","agentic"]},"sidebar":"docsJavaSidebar","previous":{"title":"Prompt Registry","permalink":"/ai-sdk/docs/java/ai-core/prompt-registry"},"next":{"title":"Release Notes","permalink":"/ai-sdk/docs/java/release-notes"}}');var o=t(4848),i=t(8453);const a={id:"agentic-workflows",title:"Getting Started with Agentic Workflows",hide_title:!1,hide_table_of_contents:!1,description:"A tutorial on how to build agentic workflows using the SAP AI SDK.",keywords:["sap","ai","sdk","cloud","orchestration","agentic"]},s=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create Mock Tools",id:"create-mock-tools",level:2},{value:"Set up the Agent",id:"set-up-the-agent",level:2},{value:"Implementing the Agentic Workflow",id:"implementing-the-agentic-workflow",level:2},{value:"Running the Agentic Workflow",id:"running-the-agentic-workflow",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial we will build a simple agentic travel assistant using the SAP AI SDK and its SpringAI integration.\nThe agent will create a short itinerary for a one-day trip to a specified city.\nIn order to do that, it will collect weather information as well as restaurant recommendations through tool usage and combine the collected information using chat memory."}),"\n",(0,o.jsx)(n.p,{children:"The agent will perform the following steps in a chain-like structure:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Accept a travel request by the user."}),"\n",(0,o.jsx)(n.li,{children:"Use a custom tool to recommend restaurants for the requested city."}),"\n",(0,o.jsx)(n.li,{children:"Use a custom tool to get the current weather for the requested city."}),"\n",(0,o.jsx)(n.li,{children:"Combine the collected information into a short itinerary using chat memory and return it to the user."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For further reading on this topic, we recommend the Spring article ",(0,o.jsx)(n.a,{href:"https://spring.io/blog/2025/01/21/spring-ai-agentic-patterns",children:"Building Effective Agents with SpringAI"}),".\nOur examples follow some of the ideas outlined there and throughout this tutorial we will use terms introduced in this article."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["An example implementation of this tutorial can be found in ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiAgenticWorkflowService.java",children:"our Spring Boot application"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial requires basic knowledge of Java, the SAP AI SDK, and Spring.\nAlso, a basic understanding of concepts regarding LLMs and the above mentioned ",(0,o.jsx)(n.a,{href:"https://spring.io/blog/2025/01/21/spring-ai-agentic-patterns",children:"article on building agents with SpringAI"})," are assumed."]}),"\n",(0,o.jsxs)(n.p,{children:["For technical prerequisites please refer to our ",(0,o.jsx)(n.a,{href:"../overview-cloud-sdk-for-ai-java#general-requirements",children:"general requirements"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"create-mock-tools",children:"Create Mock Tools"}),"\n",(0,o.jsxs)(n.p,{children:["We first create two mock tools.\nFor more information on tool usage, we refer to the respective ",(0,o.jsx)(n.a,{href:"../spring-ai/orchestration#tool-calling",children:"chapter in our documentation"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The first tool will return (pre-defined) restaurant suggestion for a provided city."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'class RestaurantMethod {\n\n  /**\n   * Request for list of restaurants\n   *\n   * @param location the city\n   */\n  record Request(String location) {}\n\n  /**\n   * Response for restaurant recommendations\n   *\n   * @param restaurants the list of restaurants\n   */\n  record Response(List<String> restaurants) {}\n\n  @Nonnull\n  @Tool(description = "Get recommended restaurants for a location")\n  static RestaurantMethod.Response getRestaurants(\n      @ToolParam @Nonnull final RestaurantMethod.Request request) {\n    var recommendations =\n        Map.of(\n            "paris",\n            List.of("Le Comptoir du Relais", "L\'As du Fallafel", "Breizh Caf\xe9"),\n            "reykjavik",\n            List.of("Dill Restaurant", "Fish Market", "Grillmarka\xf0urinn"));\n    return new RestaurantMethod.Response(\n        recommendations.getOrDefault(\n            request.location.toLowerCase(Locale.ROOT), List.of("No recommendations for this city.")));\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The second tool will return a (fake) weather forecast for a given city."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'class WeatherMethod {\n\n  /** Unit of temperature */\n  enum Unit {\n    /** Celsius */\n    C,\n    /** Fahrenheit */\n    F\n  }\n\n  /**\n   * Request for the weather\n   *\n   * @param location the city\n   * @param unit the unit of temperature\n   */\n  record Request(String location, Unit unit) {}\n\n  /**\n   * Response for the weather\n   *\n   * @param temp the temperature\n   * @param unit the unit of temperature\n   */\n  record Response(double temp, Unit unit) {}\n\n  @Nonnull\n  @Tool(description = "Get the weather in location")\n  static Response getCurrentWeather(@ToolParam @Nonnull final Request request) {\n    final int temperature = request.location.hashCode() % 30;\n    return new Response(temperature, request.unit);\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"set-up-the-agent",children:"Set up the Agent"}),"\n",(0,o.jsxs)(n.p,{children:["We are now ready to create our agent.\nFor this, we start by configuring the chat memory and adding the tools from above.\nNote that in order to integrate this into a Spring app, we create the class as a Spring service.\nThe agentic workflows will be triggered when calling the ",(0,o.jsx)(n.code,{children:"runAgent()"})," method with the user input."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Service\npublic class SpringAiAgenticWorkflowService {\n  private final ChatModel client = new OrchestrationChatModel();\n  private final OrchestrationModuleConfig config =\n      new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\n  public ChatResponse runAgent(String userInput) {\n\n    //    Configure chat memory\n    var memory = new InMemoryChatMemory();\n    var advisor = new MessageChatMemoryAdvisor(memory);\n    var cl = ChatClient.builder(client).defaultAdvisors(advisor).build();\n\n    //    Add (mocked) tools\n    var options = new OrchestrationChatOptions(config);\n    options.setToolCallbacks(\n        List.of(ToolCallbacks.from(new WeatherMethod(), new RestaurantMethod())));\n    options.setInternalToolExecutionEnabled(true);\n\n    //    The actual agentic workflow will be added here.\n\n    return null;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on how to use chat memory, we refer to the respective ",(0,o.jsx)(n.a,{href:"../spring-ai/orchestration#chat-memory",children:"chapter in our documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"implementing-the-agentic-workflow",children:"Implementing the Agentic Workflow"}),"\n",(0,o.jsx)(n.p,{children:"Next, we implement the actual agentic workflow by adapting the class introduced above.\nTo keep it simple in the beginning, we start with a chain-like workflow.\nFor this, we first define the system prompts that we will use in the call to the LLM and then loop over them, each time using the output from the previous call as input for the next."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Service\npublic class SpringAiAgenticWorkflowService {\n  private final ChatModel client = new OrchestrationChatModel();\n  private final OrchestrationModuleConfig config =\n      new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\n  @Nonnull\n  public String runAgent(String userInput) {\n\n    //    Configure chat memory\n    val repository = new InMemoryChatMemoryRepository();\n    val memory = MessageWindowChatMemory.builder().chatMemoryRepository(repository).build();\n    val advisor = MessageChatMemoryAdvisor.builder(memory).build();\n    var cl = ChatClient.builder(client).defaultAdvisors(advisor).build();\n\n    //    Add (mocked) tools\n    var options = new OrchestrationChatOptions(config);\n    options.setToolCallbacks(\n        List.of(ToolCallbacks.from(new WeatherMethod(), new RestaurantMethod())));\n    options.setInternalToolExecutionEnabled(true);\n\n    //    Prompts for the chain workflow\n    List<String> systemPrompts =\n        List.of(\n            "You are a traveling planning agent for a single day trip. Where appropriate, use the provided tools. First, start by suggesting some restaurants for the mentioned city.",\n            "Now, check the whether for the city.",\n            "Finally, combine the suggested itinerary from this conversation into a short, one-sentence plan for the day trip.");\n\n    //    Perform the chain workflow\n    String responseText = userInput;\n\n    for (String systemPrompt : systemPrompts) {\n\n      // Combine the pre-defined prompt with the previous answer to get the new input\n      String input = String.format("{%s}\\n {%s}", systemPrompt, responseText);\n      var prompt = new Prompt(input, options);\n\n      // Make a call to the LLM with the new input\n      var response =\n          Objects.requireNonNull(\n              cl.prompt(prompt).call().chatResponse(), "Chat response is null.");\n      responseText = response.getResult().getOutput().getText();\n    }\n\n    return responseText;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running-the-agentic-workflow",children:"Running the Agentic Workflow"}),"\n",(0,o.jsxs)(n.p,{children:["We can now run our agentic workflow by calling the ",(0,o.jsx)(n.code,{children:"runAgent()"})," method with some user input."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Autowired\nprivate SpringAiAgenticWorkflowService service;\n\nString runChainWorkflow() {\n  final var response = service.runAgent("I want to do a one-day trip to Paris. Help me make an itinerary, please");\n  return response;\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"This tutorial showed how to build a simple, chain-like agentic workflow using the SAP AI SDK's SpringAI integration."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);