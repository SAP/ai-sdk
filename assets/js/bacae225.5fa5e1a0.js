"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[8950],{7856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>S,default:()=>_,frontMatter:()=>I,metadata:()=>a,toc:()=>L});const a=JSON.parse('{"id":"tutorials/getting-started-with-agents/langchain","title":"Getting Started with Agents using LangChain","description":"Building a Travel Itinerary Assistant with LangGraph and LangChain Client","source":"@site/docs-js/tutorials/getting-started-with-agents/langchain.mdx","sourceDirName":"tutorials/getting-started-with-agents","slug":"/tutorials/getting-started-with-agents/langchain","permalink":"/ai-sdk/docs/js/tutorials/getting-started-with-agents/langchain","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-js/tutorials/getting-started-with-agents/langchain.mdx","tags":[],"version":"current","frontMatter":{"id":"langchain","title":"Getting Started with Agents using LangChain","sidebar_label":"LangChain","description":"Building a Travel Itinerary Assistant with LangGraph and LangChain Client","keywords":["tutorial","agents","langgraph","langchain","openai","orchestration"]},"sidebar":"docsJsSidebar","previous":{"title":"Prompt Registry","permalink":"/ai-sdk/docs/js/ai-core/prompt-registry"},"next":{"title":"Error Handling","permalink":"/ai-sdk/docs/js/error-handling"}}');var s=t(4848),r=t(8453),i=t(6540),o=t(4164),l=t(3104),c=t(6347),d=t(205),u=t(7485),h=t(1682),g=t(679);function p(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})))}(t);return function(e){const n=(0,h.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f({value:e,tabValues:n}){return n.some((n=>n.value===e))}function x({queryString:e=!1,groupId:n}){const t=(0,c.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,u.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=m(e),[r,o]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[l,c]=x({queryString:t,groupId:a}),[u,h]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,g.Dv)(n);return[t,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:a}),p=(()=>{const e=l??u;return f({value:e,tabValues:s})?e:null})();(0,d.A)((()=>{p&&o(p)}),[p]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),h(e)}),[c,h,s]),tabValues:s}}var j=t(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w({className:e,block:n,selectedValue:t,selectValue:a,tabValues:r}){const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,s=i.indexOf(n),o=r[s].value;o!==t&&(c(n),a(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:r.map((({value:e,label:n,attributes:a})=>(0,s.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{i.push(e)},onKeyDown:u,onClick:d,...a,className:(0,o.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function v({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function k(e){const n=b(e);return(0,s.jsxs)("div",{className:(0,o.A)("tabs-container",y.tabList),children:[(0,s.jsx)(w,{...n,...e}),(0,s.jsx)(v,{...n,...e})]})}function C(e){const n=(0,j.A)();return(0,s.jsx)(k,{...e,children:p(e.children)},String(n))}const T={tabItem:"tabItem_Ymn6"};function A({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(T.tabItem,t),hidden:n,children:e})}const I={id:"langchain",title:"Getting Started with Agents using LangChain",sidebar_label:"LangChain",description:"Building a Travel Itinerary Assistant with LangGraph and LangChain Client",keywords:["tutorial","agents","langgraph","langchain","openai","orchestration"]},S="Introduction",N={},L=[{value:"Installation",id:"installation",level:2},{value:"Define Mock Tools",id:"define-mock-tools",level:2},{value:"Setup the Agent",id:"setup-the-agent",level:2},{value:"Define Agent Logic and LangGraph Flow",id:"define-agent-logic-and-langgraph-flow",level:2},{value:"Run the assistant",id:"run-the-assistant",level:2},{value:"Summary",id:"summary",level:2}];function M(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, you'll build a simple travel assistant agent using a LangChain Client, either (",(0,s.jsx)(n.code,{children:"OrchestrationClient"}),") or (",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"}),") from the ",(0,s.jsx)(n.code,{children:"@sap-ai-sdk/langchain"})," package alongside ",(0,s.jsx)(n.code,{children:"LangGraph"}),".\nThe agent creates an itinerary based on current weather conditions and supports follow-up queries."]}),"\n",(0,s.jsx)(n.p,{children:"The assistant performs these steps:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accepts a user travel request."}),"\n",(0,s.jsx)(n.li,{children:"Calls a weather tool to get the current weather for the city."}),"\n",(0,s.jsx)(n.li,{children:"Generates a weather-aware 3-item itinerary."}),"\n",(0,s.jsx)(n.li,{children:"Handles follow-up questions like restaurant recommendations using conversation memory."}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["Refer to prerequisites outlined ",(0,s.jsx)(n.a,{href:"../overview-cloud-sdk-for-ai-js#prerequisites",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This tutorial assumes you have a basic understanding of TypeScript, LLMs and LangChain concepts."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Install the following dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @sap-ai-sdk/langchain langchain @langchain/langgraph @langchain/core zod\n"})}),"\n",(0,s.jsx)(n.h2,{id:"define-mock-tools",children:"Define Mock Tools"}),"\n",(0,s.jsx)(n.p,{children:"Define two custom tools for weather and restaurant data."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get_weather"})," for returning weather by city"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get_restaurants"})," for city-based restaurant recommendations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { tool } from '@langchain/core/tools';\nimport { z } from 'zod';\n\nconst mockWeatherData: Record<\n  string,\n  { temperature: string; condition: string }\n> = {\n  paris: { temperature: '22\xb0C', condition: 'Mild and pleasant' },\n  reykjavik: { temperature: '3\xb0C', condition: 'Cold and windy' }\n};\n\nconst mockRestaurantData: Record<string, string[]> = {\n  paris: ['Le Comptoir du Relais', \"L'As du Fallafel\", 'Breizh Caf\xe9'],\n  reykjavik: ['Dill Restaurant', 'Fish Market', 'Grillmarka\xf0urinn']\n};\n\nconst getWeatherTool = tool(\n  async ({ city }) => {\n    const weather = mockWeatherData[city.toLowerCase()];\n    return weather\n      ? `Current weather in ${city}: ${weather.temperature}, ${weather.condition}`\n      : `Weather data not available for ${city}.`;\n  },\n  {\n    name: 'get_weather',\n    description: 'Get current weather information for a city',\n    schema: z.object({ city: z.string().describe('The city name') })\n  }\n);\n\nconst getRestaurantsTool = tool(\n  async ({ city }) => {\n    const restaurants = mockRestaurantData[city.toLowerCase()];\n    return restaurants\n      ? `Popular restaurants in ${city}: ${restaurants.join(', ')}`\n      : `No restaurant data available for ${city}.`;\n  },\n  {\n    name: 'get_restaurants',\n    description: 'Get restaurant recommendations for a city',\n    schema: z.object({ city: z.string().describe('The city name') })\n  }\n);\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"This example uses mocked data for simplicity.\nReplace the tools' implementation with real API calls to integrate live data."})}),"\n",(0,s.jsx)(n.h2,{id:"setup-the-agent",children:"Setup the Agent"}),"\n",(0,s.jsxs)(n.p,{children:["Initialize the client and add tools using the ",(0,s.jsx)(n.code,{children:"buildTools()"})," method.\nSet up a ",(0,s.jsx)(n.code,{children:"ToolNode"})," for routing tool calls."]}),"\n",(0,s.jsxs)(C,{groupId:"client",defaultValue:"orchestration",values:[{label:"Orchestration Client",value:"orchestration"},{label:"OpenAI Client",value:"openai"}],children:[(0,s.jsx)(A,{value:"openai",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { AzureOpenAiChatClient } from '@sap-ai-sdk/langchain';\nimport { ToolNode } from '@langchain/langgraph/prebuilt';\n\nconst tools = [getWeatherTool, getRestaurantsTool];\n\nconst model = new AzureOpenAiChatClient({\n  modelName: 'gpt-4o',\n  temperature: 0.7\n}).bindTools(tools);\n\nconst toolNode = new ToolNode(tools);\n"})})}),(0,s.jsx)(A,{value:"orchestration",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { OrchestrationClient } from '@sap-ai-sdk/langchain';\nimport { ToolNode } from '@langchain/langgraph/prebuilt';\n\nconst tools = [getWeatherTool, getRestaurantsTool];\n\nconst model = new OrchestrationClient({\n  modelName: 'gpt-4o',\n  temperature: 0.7\n}).bindTools(tools);\n\nconst toolNode = new ToolNode(tools);\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"define-agent-logic-and-langgraph-flow",children:"Define Agent Logic and LangGraph Flow"}),"\n",(0,s.jsxs)(n.p,{children:["Configure a ",(0,s.jsx)(n.code,{children:"StateGraph"})," that routes between ",(0,s.jsx)(n.code,{children:"agent"})," \u2192 ",(0,s.jsx)(n.code,{children:"tool"})," \u2192 ",(0,s.jsx)(n.code,{children:"agent"}),", and ends when no more tool calls are needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  StateGraph,\n  MessagesAnnotation,\n  MemorySaver,\n  START\n} from '@langchain/langgraph';\nimport { AIMessage } from '@langchain/core/messages';\n\nfunction shouldContinue({ messages }: typeof MessagesAnnotation.State) {\n  const lastMessage = messages[messages.length - 1] as AIMessage;\n  return lastMessage.tool_calls?.length ? 'tools' : '__end__';\n}\n\nasync function callModel(state: typeof MessagesAnnotation.State) {\n  const response = await model.invoke(state.messages);\n  return { messages: [response] };\n}\n\nconst workflow = new StateGraph(MessagesAnnotation)\n  .addNode('agent', callModel)\n  .addEdge(START, 'agent')\n  .addNode('tools', toolNode)\n  .addEdge('tools', 'agent')\n  .addConditionalEdges('agent', shouldContinue);\n\nconst memory = new MemorySaver();\nconst app = workflow.compile({ checkpointer: memory });\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraphjs/how-tos/persistence/?h=memory+saver#add-memory",children:(0,s.jsx)(n.code,{children:"MemorySaver"})})," allows sharing context across multiple interactions in a single conversational thread (",(0,s.jsx)(n.code,{children:"conv-1"}),").\nIn this example, it enables the agent to remember the previously mentioned city."]})}),"\n",(0,s.jsx)(n.h2,{id:"run-the-assistant",children:"Run the assistant"}),"\n",(0,s.jsx)(n.p,{children:"The following example simulates a conversation:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The assistant receives an itinerary request."}),"\n",(0,s.jsx)(n.li,{children:"It retrieves the weather before generating a plan."}),"\n",(0,s.jsx)(n.li,{children:"A follow-up message requests restaurant recommendations for the same city."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { HumanMessage, SystemMessage } from '@langchain/core/messages';\n\nconst config = { configurable: { thread_id: 'conv-1' } };\n\nasync function runTravelAssistant() {\n  // Initial system prompt and user message\n  let messages = [\n    new SystemMessage(\n      'You are a helpful travel assistant. Create a short, practical 3-item itinerary based on the city. Always check the weather before suggesting an itinerary.'\n    ),\n    new HumanMessage(\n      \"I'm traveling to Paris. Can you help me prepare an itinerary?\"\n    )\n  ];\n\n  // First interaction - triggers weather tool and itinerary generation\n  let response = await app.invoke({ messages }, config);\n  console.log('Assistant:', response.messages[response.messages.length - 1]);\n\n  // Continue conversation - add restaurant question\n  messages = [new HumanMessage('Can you also recommend some restaurants?')];\n\n  // Second interaction - should remember Paris and call restaurant tool\n  response = await app.invoke({ messages }, config);\n  console.log('Assistant:', response.messages[response.messages.length - 1]);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This tutorial demonstrates how to implement a simple agent workflow using:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The LangChain client with the ",(0,s.jsx)(n.code,{children:"bindTools()"})," method to integrate external capabilities."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"StateGraph"})," to manage agent-tool flow and decisions, and ",(0,s.jsx)(n.code,{children:"MemorySaver"})," for multi-turn memory retention."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Explore additional capabilities and patterns in ",(0,s.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraphjs/tutorials/quickstart/",children:"LangGraph documentation"}),"."]})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(M,{...e})}):M(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);