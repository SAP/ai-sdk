"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[7050],{6984:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"foundation-models/openai/chat-completion","title":"Chat Completion","description":"How to use the SAP Cloud SDK for AI to perform chat completion tasks using Azure OpenAI models deployed through SAP AI Core.","source":"@site/docs-js/foundation-models/openai/chat-completion.mdx","sourceDirName":"foundation-models/openai","slug":"/foundation-models/openai/chat-completion","permalink":"/ai-sdk/docs/js/foundation-models/openai/chat-completion","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-js/foundation-models/openai/chat-completion.mdx","tags":[],"version":"current","frontMatter":{"id":"chat-completion","title":"Chat Completion","hide_title":false,"hide_table_of_contents":false,"description":"How to use the SAP Cloud SDK for AI to perform chat completion tasks using Azure OpenAI models deployed through SAP AI Core.","keywords":["sap","cloud","sdk","ai","chat","completion","openai"]},"sidebar":"docsJsSidebar","previous":{"title":"Foundation Models","permalink":"/ai-sdk/docs/js/foundation-models/"},"next":{"title":"Embedding","permalink":"/ai-sdk/docs/js/foundation-models/openai/embedding"}}');var s=t(4848),r=t(8453);const i={id:"chat-completion",title:"Chat Completion",hide_title:!1,hide_table_of_contents:!1,description:"How to use the SAP Cloud SDK for AI to perform chat completion tasks using Azure OpenAI models deployed through SAP AI Core.",keywords:["sap","cloud","sdk","ai","chat","completion","openai"]},a=void 0,l={},c=[{value:"Making Requests",id:"making-requests",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Streaming the Delta Content",id:"streaming-the-delta-content",level:3},{value:"Streaming with Abort Controller",id:"streaming-with-abort-controller",level:3},{value:"Function Calling",id:"function-calling",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Initialize the ",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"})," by following the instructions in the ",(0,s.jsx)(n.a,{href:"../../foundation-models#client-initialization",children:"Client Initialization"})," section."]}),"\n",(0,s.jsxs)(n.p,{children:["Currently, the client sends request with Azure OpenAI API version ",(0,s.jsx)(n.code,{children:"2024-10-21"}),".\nWe are continuously updating the client to match the latest API specification.\nYou can overwrite the API version by setting the ",(0,s.jsx)(n.code,{children:"api-version"})," parameter in the ",(0,s.jsx)(n.code,{children:"CustomRequestConfig"})," object.\nRefer to the ",(0,s.jsx)(n.a,{href:"../../foundation-models#custom-request-configuration",children:"Custom Request Configuration"})," section for more details."]}),"\n",(0,s.jsx)(n.h2,{id:"making-requests",children:"Making Requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const response = await client.run({\n  messages: [\n    {\n      role: 'user',\n      content: 'Where is the deepest place on earth located?'\n    }\n  ]\n});\nconsole.log(response.getContent());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Multiple messages can be sent in a single request, enabling the model to reference the conversation history.\nInclude ",(0,s.jsx)(n.code,{children:"max_tokens"})," and ",(0,s.jsx)(n.code,{children:"temperature"})," in the request to control the completion behavior:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const response = await client.run({\n  messages: [\n    {\n      role: 'system',\n      content: 'You are a friendly chatbot.'\n    },\n    {\n      role: 'user',\n      content: 'Hi, my name is Isa'\n    },\n    {\n      role: 'assistant',\n      content:\n        'Hi Isa! It is nice to meet you. Is there anything I can help you with today?'\n    },\n    {\n      role: 'user',\n      content: 'Can you remind me, What is my name?'\n    }\n  ],\n  max_tokens: 100,\n  temperature: 0.0\n});\nconsole.log(response.getContent());\n\nconst tokenUsage = response.getTokenUsage();\nconsole.log(\n  `Total tokens consumed by the request: ${tokenUsage.total_tokens}\\n` +\n    `Input prompt tokens consumed: ${tokenUsage.prompt_tokens}\\n` +\n    `Output text completion tokens consumed: ${tokenUsage.completion_tokens}\\n`\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use the autocompletion feature to see other possible parameters."}),"\n",(0,s.jsx)(n.h2,{id:"streaming",children:"Streaming"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AzureOpenAiChatClient"})," supports streaming response for chat completion requests based on the ",(0,s.jsx)(n.a,{href:"https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events",children:"Server-sent events"})," standard."]}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"stream()"})," method to receive a stream of chunk responses from the model.\nAfter consuming the stream, call the helper methods to get the finish reason and token usage information."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const response = await client.stream({\n  messages: [\n    {\n      role: 'user',\n      content: 'Give me a very long introduction of SAP Cloud SDK.'\n    }\n  ]\n});\n\nfor await (const chunk of response.stream) {\n  console.log(JSON.stringify(chunk));\n}\n\nconst finishReason = response.getFinishReason();\nconst tokenUsage = response.getTokenUsage();\n\nconsole.log(`Finish reason: ${finishReason}\\n`);\nconsole.log(`Token usage: ${JSON.stringify(tokenUsage)}\\n`);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"streaming-the-delta-content",children:"Streaming the Delta Content"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"toContentStream()"})," method to create a stream generating delta content string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"for await (const chunk of response.stream.toContentStream()) {\n  console.log(chunk); // will log the delta content\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"streaming-with-abort-controller",children:"Streaming with Abort Controller"}),"\n",(0,s.jsxs)(n.p,{children:["Streaming request can be aborted using the ",(0,s.jsx)(n.code,{children:"AbortController"})," API.\nIn case of an error, SAP Cloud SDK for AI will automatically close the stream.\nAdditionally, it can be aborted manually by calling the ",(0,s.jsx)(n.code,{children:"stream()"})," method with an ",(0,s.jsx)(n.code,{children:"AbortController"})," object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const controller = new AbortController();\nconst response = await client.stream(\n  {\n    messages: [\n      {\n        role: 'user',\n        content: 'Give me a very long introduction of SAP Cloud SDK.'\n      }\n    ]\n  },\n  controller\n);\n\n// Abort the streaming request after one second\nsetTimeout(() => {\n  controller.abort();\n}, 1000);\n\nfor await (const chunk of response.stream) {\n  console.log(JSON.stringify(chunk));\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, streaming request will be aborted after one second.\nAbort controller can be useful, e.g., when end-user wants to stop the stream or refreshes the page."}),"\n",(0,s.jsx)(n.h2,{id:"function-calling",children:"Function Calling"}),"\n",(0,s.jsxs)(n.p,{children:["Define and pass ",(0,s.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/function-calling",children:"tool definitions"})," to enable the model to call specific functions.\nHere's an example of temperature conversion using tool calls:"]}),"\n",(0,s.jsxs)(n.p,{children:["First, define the tool with its ",(0,s.jsx)(n.code,{children:"name"})," and ",(0,s.jsx)(n.code,{children:"parameters"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const convertTemperatureTool: AzureOpenAiChatCompletionTool = {\n  type: 'function',\n  function: {\n    name: 'convert_temperature_to_fahrenheit',\n    description: 'Converts temperature from Celsius to Fahrenheit',\n    parameters: {\n      type: 'object',\n      properties: {\n        temperature: {\n          type: 'number',\n          description: 'The temperature value in Celsius to convert.'\n        }\n      },\n      required: ['temperature']\n    }\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"strict"})," to ",(0,s.jsx)(n.code,{children:"true"})," to ensure function calls adhere to the function schema.\nFor more information refer to the ",(0,s.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/function-calling?api-mode=chat#strict-mode",children:"OpenAI documentation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Initialize the client and send the initial request with the tool definition:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const client = new AzureOpenAiChatClient('gpt-4o');\nconst messages = [\n  { role: 'user', content: 'Convert 20 degrees Celsius to Fahrenheit.' }\n];\n\nconst response = await client.run({\n  messages,\n  tools: [convertTemperatureTool]\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"When the model decides to use a tool, it returns the function name and input arguments in the response.\nUse the model response to execute the function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const initialResponse = response.data.choices[0].message;\nmessages.push(initialResponse);\n\nif (initialResponse.tool_calls) {\n  const toolCall = initialResponse.tool_calls[0];\n  // The model provides the function name to call\n  const name = toolCall.function.name;\n  // Extract the arguments to pass to the function\n  const args = JSON.parse(toolCall.function.arguments);\n\n  // Execute the function with the provided arguments\n  const toolResult = callFunction(name, args);\n  messages.push({\n    role: 'tool',\n    content: toolResult,\n    tool_call_id: toolCall.id\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"callFunction"})," routes the model's function calls to their actual implementations."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Route function calls to the appropriate implementation\nfunction callFunction(name: string, args: any): string {\n  switch (name) {\n    case 'convert_temperature_to_fahrenheit':\n      return convertTemperatureToFahrenheit(args.temperature);\n    default:\n      throw new Error(`Function: ${name} not found!`);\n  }\n}\n\n// Define the actual function that performs the conversion\nfunction convertTemperatureToFahrenheit(temperature: number): string {\n  return `The temperature in Fahrenheit is ${(temperature * 9) / 5 + 32}\xb0F.`;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Send the function result back to the model to get it's final response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const finalResponse = await client.run({\n  messages, // List of the previous messages with the function result\n  tools: [convertTemperatureTool]\n});\n\nconsole.log(finalResponse.getContent());\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);