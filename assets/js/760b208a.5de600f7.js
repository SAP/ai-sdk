"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[6045],{1849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"spring-ai/orchestration","title":"Orchestration Integration","description":"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.","source":"@site/docs-java/spring-ai/orchestration.mdx","sourceDirName":"spring-ai","slug":"/spring-ai/orchestration","permalink":"/ai-sdk/docs/java/spring-ai/orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-java/spring-ai/orchestration.mdx","tags":[],"version":"current","frontMatter":{"id":"orchestration","title":"Orchestration Integration","hide_title":false,"hide_table_of_contents":false,"description":"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.","keywords":["sap","cloud","sdk","ai"]},"sidebar":"docsJavaSidebar","previous":{"title":"Embedding","permalink":"/ai-sdk/docs/java/foundation-models/openai/embedding"},"next":{"title":"OpenAI Integration","permalink":"/ai-sdk/docs/java/spring-ai/openai"}}');var o=t(4848),r=t(8453);const a={id:"orchestration",title:"Orchestration Integration",hide_title:!1,hide_table_of_contents:!1,description:"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.",keywords:["sap","cloud","sdk","ai"]},s=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Chat Completion",id:"chat-completion",level:2},{value:"Masking",id:"masking",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Stream chat completion",id:"stream-chat-completion",level:2},{value:"Tool Calling",id:"tool-calling",level:2},{value:"Chat Memory",id:"chat-memory",level:2},{value:"Response Format",id:"response-format",level:2},{value:"Templates from Prompt Registry",id:"templates-from-prompt-registry",level:2},{value:"Prompt Registry with input parameters and chat memory",id:"prompt-registry-with-input-parameters-and-chat-memory",level:3},{value:"Model Context Protocol (MCP) Integration",id:"model-context-protocol-mcp-integration",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Configure an MCP Client",id:"configure-an-mcp-client",level:2},{value:"Using MCP with Orchestration",id:"using-mcp-with-orchestration",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"This guide provides examples of how to use our Spring AI integration with our Orchestration client in SAP AI Core\nfor chat completion tasks using the SAP AI SDK for Java."}),"\n",(0,o.jsxs)(n.p,{children:["First, add the following dependencies to your ",(0,o.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.ai</groupId>\n      <artifactId>spring-ai-bom</artifactId>\n      <version>${spring-ai.version}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-commons</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-model</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-client-chat</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>com.sap.ai.sdk</groupId>\n    <artifactId>orchestration</artifactId>\n    <version>${ai-sdk.version}</version>\n  </dependency>\n</dependencies>\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Spring AI Version",type:"note",children:(0,o.jsxs)(n.p,{children:["As of version ",(0,o.jsx)(n.code,{children:"1.10.0"})," the minimum required version for Spring AI is ",(0,o.jsx)(n.code,{children:"1.0.0"}),".\nPlease refer to the ",(0,o.jsx)(n.a,{href:"https://docs.spring.io/spring-ai/reference/upgrade-notes.html#upgrading-to-1-0-0-RC1",children:"official Spring AI upgrade guide"})," for details on how to upgrade from a previous milestone version."]})}),"\n",(0,o.jsx)(n.h2,{id:"chat-completion",children:"Chat Completion"}),"\n",(0,o.jsx)(n.p,{children:"The Orchestration client is integrated in Spring AI classes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nPrompt prompt = new Prompt("What is the capital of France?", opts);\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"masking",children:"Masking"}),"\n",(0,o.jsx)(n.p,{children:"Configure Orchestration modules within Spring AI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\nvar masking =\n    DpiMasking.anonymization()\n        .withEntities(DPIEntities.EMAIL, DPIEntities.ADDRESS, DPIEntities.LOCATION);\n\nvar opts = new OrchestrationChatOptions(config.withMaskingConfig(masking));\nvar prompt =\n    new Prompt(\n        \"Please write 'Hello World!' to me via email. My email address is foo.bar@baz.ai\",\n        opts);\n\nChatResponse response = client.call(prompt);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please\nfind ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,o.jsxs)(n.p,{children:["Apply ",(0,o.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/input-filtering",children:"input filtering"})," or ",(0,o.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/output-filtering",children:"output filtering"})," to the LLM call:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\nvar filterConfig = new AzureContentFilter()\n        .hate(AzureFilterThreshold.ALLOW_SAFE)\n        .selfHarm(AzureFilterThreshold.ALLOW_SAFE)\n        .sexual(AzureFilterThreshold.ALLOW_SAFE)\n        .violence(AzureFilterThreshold.ALLOW_SAFE);\n\n// Use config.withOutputFiltering(filterConfig) for output filtering\nvar opts = new OrchestrationChatOptions(config.withInputFiltering(filterConfig));\nvar prompt = new Prompt(\"'We shall spill blood tonight', said the operator in charge.\", opts);\n\nChatResponse response = client.call(prompt);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on the behaviour of input and output filters, check the ",(0,o.jsx)(n.a,{href:"../orchestration/chat-completion#filtering",children:"Filter Documentation for Orchestration"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"stream-chat-completion",children:"Stream chat completion"}),"\n",(0,o.jsx)(n.p,{children:"It's possible to pass a stream of chat completion delta elements, e.g. from the application backend\nto the frontend in real-time."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nPrompt prompt =\n    new Prompt(\n        "Can you give me the first 100 numbers of the Fibonacci sequence?", opts);\nFlux<ChatResponse> flux = client.stream(prompt);\n\n// also possible to keep only the chat completion text\nFlux<String> responseFlux =\n    flux.map(chatResponse -> chatResponse.getResult().getOutput().getContent());\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Note: A Spring endpoint can return ",(0,o.jsx)(n.code,{children:"Flux"})," instead of ",(0,o.jsx)(n.code,{children:"ResponseEntity"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"tool-calling",children:"Tool Calling"}),"\n",(0,o.jsx)(n.p,{children:"First define a function that will be called by the LLM:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'class WeatherMethod {\n  enum Unit {C,F}\n  record Request(String location, Unit unit) {}\n  record Response(double temp, Unit unit) {}\n\n  @Tool(description = "Get the weather in location")\n  Response getCurrentWeather(@ToolParam Request request) {\n    int temperature = request.location.hashCode() % 30;\n    return new Response(temperature, request.unit);\n  }\n}\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"What to consider:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Self-explanatory interfaces that avoid acronyms."}),"\n",(0,o.jsx)(n.li,{children:"Provide clear, humane readable error messages."}),"\n",(0,o.jsx)(n.li,{children:"Enriched data objects to avoid client-side data merging."}),"\n",(0,o.jsx)(n.li,{children:"Filter output to control size"}),"\n"]})]}),"\n",(0,o.jsx)(n.p,{children:"Then pass your tool to the model as follows."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nopts.setToolCallbacks(List.of(ToolCallbacks.from(new WeatherMethod())));\n\nPrompt prompt = new Prompt("What is the weather in Potsdam and in Toulouse?", opts);\n\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"chat-memory",children:"Chat Memory"}),"\n",(0,o.jsxs)(n.p,{children:["Create a Spring AI ",(0,o.jsx)(n.code,{children:"ChatClient"})," from our ",(0,o.jsx)(n.code,{children:"OrchestrationChatModel"})," and add a chat memory advisor like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nval repository = new InMemoryChatMemoryRepository();\nval memory = MessageWindowChatMemory.builder().chatMemoryRepository(repository).build();\nval advisor = MessageChatMemoryAdvisor.builder(memory).build();\nvar cl = ChatClient.builder(client).defaultAdvisors(advisor).build();\n\nPrompt prompt1 = new Prompt("What is the capital of France?", opts);\nString content1 = cl.prompt(prompt1).call().content();\n// content1 is "Paris"\n\nPrompt prompt2 = new Prompt("And what is the typical food there?", opts);\nString content2 = cl.prompt(prompt2).call().content();\n// chat memory will remember that the user is inquiring about France.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,o.jsxs)(n.p,{children:["It is possible to force the response of the LLM to follow a certain JSON schema which is derived from a Java class.\nThe response can automatically be deserialized back into the Java class.\nThe following example uses the ",(0,o.jsx)(n.code,{children:"Translation"})," class:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public record Translation(\n  @JsonProperty(required = true) String translation,\n  @JsonProperty(required = true) String language) {}\n\nvar client = new OrchestrationChatModel();\n\nvar schema = ResponseJsonSchema.fromType(Translation.class);\nvar template = TemplateConfig.create().withJsonSchemaResponse(schema);\nvar opts = new OrchestrationChatOptions(config.withTemplateConfig(template));\n\nvar prompt =\n  new Prompt(\"How do I say 'AI is going to revolutionize the world' in dutch?\", opts);\n\nTranslation translation = client.call(prompt).entity(Translation.class);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on setting a response format, check the corresponding ",(0,o.jsx)(n.a,{href:"../orchestration/chat-completion#response-format",children:"Documentation for Orchestration"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"templates-from-prompt-registry",children:"Templates from Prompt Registry"}),"\n",(0,o.jsx)(n.p,{children:"You can use prompt templates stored in a prompt registry in your Spring AI application."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\n\nvar template = TemplateConfig.reference().byScenario("scenario").name("name").version("1.0.0");\nvar opts = new OrchestrationChatOptions(config.withTemplateConfig(template));\nvar prompt = new Prompt(List.of(), opts);\n\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on prompt registry, we refer to the corresponding ",(0,o.jsx)(n.a,{href:"../ai-core/prompt-registry",children:"documentation"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"prompt-registry-with-input-parameters-and-chat-memory",children:"Prompt Registry with input parameters and chat memory"}),"\n",(0,o.jsxs)(n.p,{children:["Please see this ",(0,o.jsx)(n.a,{href:"../ai-core/prompt-registry#using-templates-in-springai",children:"documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"model-context-protocol-mcp-integration",children:"Model Context Protocol (MCP) Integration"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://modelcontextprotocol.io/overview",children:"Model Context Protocol (MCP)"})," enables AI models to interact with external tools and resources, expanding their capabilities beyond simple text generation.\nMCP servers can be used together with the SAP AI SDK seamlessly through to the existing ",(0,o.jsx)(n.a,{href:"https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html",children:"integration with Spring AI"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Add the Spring MCP auto configuration dependency:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-autoconfigure-mcp-client</artifactId>\n    <scope>runtime</scope>\n    <version>1.0.0</version>\n</dependency>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configure-an-mcp-client",children:"Configure an MCP Client"}),"\n",(0,o.jsxs)(n.p,{children:["To use MCP with the SAP AI SDK for Java, you need to configure an MCP client in your application.\nFor this example, we configure a client for the ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem",children:"file system MCP server"}),".\nNote that you need to have ",(0,o.jsx)(n.code,{children:"npx"})," installed for this particular example."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spring:\n  ai:\n    mcp:\n      client:\n        # Type of client: SYNC or ASYNC\n        type: SYNC\n        stdio:\n          connections:\n            # Configuration for file system access, uses the current working directory\n            localFS:\n              command: npx\n              args:\n                - '-y'\n                - '@modelcontextprotocol/server-filesystem'\n                - '.'\n              env:\n                DEBUG: 'true'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on how to configure clients, refer to the ",(0,o.jsx)(n.a,{href:"https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html",children:"Spring MCP documentation"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"using-mcp-with-orchestration",children:"Using MCP with Orchestration"}),"\n",(0,o.jsx)(n.p,{children:"Once you've configured the MCP client, you can auto-wire the tools into your class:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Autowired\nToolCallbackProvider toolCallbackProvider;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["These tools can now be used in requests to the Orchestration service ",(0,o.jsx)(n.a,{href:"#tool-calling",children:"like any other tool"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"OrchestrationChatOptions opts;\nopts.setToolCallbacks(List.of(toolCallbackProvider.getToolCallbacks()));\n\n// optionally, enable automated tool execution\nopts.setInternalToolExecutionEnabled(true);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information also refer to the ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"sample code"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);