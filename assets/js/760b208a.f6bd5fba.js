"use strict";(self.webpackChunksap_ai_sdk_documentation=self.webpackChunksap_ai_sdk_documentation||[]).push([[6045],{1849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"spring-ai/orchestration","title":"Orchestration Integration","description":"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.","source":"@site/docs-java/spring-ai/orchestration.mdx","sourceDirName":"spring-ai","slug":"/spring-ai/orchestration","permalink":"/ai-sdk/docs/java/spring-ai/orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/ai-sdk/edit/main/docs-java/spring-ai/orchestration.mdx","tags":[],"version":"current","frontMatter":{"id":"orchestration","title":"Orchestration Integration","hide_title":false,"hide_table_of_contents":false,"description":"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.","keywords":["sap","cloud","sdk","ai"]},"sidebar":"docsJavaSidebar","previous":{"title":"Embedding","permalink":"/ai-sdk/docs/java/foundation-models/openai/embedding"},"next":{"title":"OpenAI Integration","permalink":"/ai-sdk/docs/java/spring-ai/openai"}}');var o=t(4848),r=t(8453);const a={id:"orchestration",title:"Orchestration Integration",hide_title:!1,hide_table_of_contents:!1,description:"How to use our Spring AI integration with our Orchestration client in SAP AI Core for chat completion tasks using the SAP AI SDK for Java.",keywords:["sap","cloud","sdk","ai"]},s=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Chat Completion",id:"chat-completion",level:2},{value:"Masking",id:"masking",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Stream chat completion",id:"stream-chat-completion",level:2},{value:"Tool Calling",id:"tool-calling",level:2},{value:"Chat Memory",id:"chat-memory",level:2},{value:"Response Format",id:"response-format",level:2},{value:"Templates from Prompt Registry",id:"templates-from-prompt-registry",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"This guide provides examples of how to use our Spring AI integration with our Orchestration client in SAP AI Core\nfor chat completion tasks using the SAP AI SDK for Java."}),"\n",(0,o.jsxs)(n.p,{children:["First, add the following dependencies to your ",(0,o.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-core</artifactId>\n    <version>1.0.0-M5</version>\n</dependency>\n\n<dependency>\n    <groupId>com.sap.ai.sdk</groupId>\n    <artifactId>orchestration</artifactId>\n    <version>${ai-sdk.version}</version>\n</dependency>\n...\n<repository>\n    <snapshots>\n        <enabled>true</enabled>\n    </snapshots>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n</repository>\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Spring AI Milestone Version",type:"note",children:[(0,o.jsxs)(n.p,{children:["Note that currently no stable version of Spring AI exists just yet.\nThe SAP AI SDK currently uses the ",(0,o.jsx)(n.a,{href:"https://spring.io/blog/2025/02/14/spring-ai-1-0-0-m6-released",children:"M6 milestone"}),"."]}),(0,o.jsx)(n.p,{children:"Please be aware that future versions of the SAP AI SDK may increase the Spring AI version."})]}),"\n",(0,o.jsx)(n.h2,{id:"chat-completion",children:"Chat Completion"}),"\n",(0,o.jsx)(n.p,{children:"The Orchestration client is integrated in Spring AI classes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nPrompt prompt = new Prompt("What is the capital of France?", opts);\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"masking",children:"Masking"}),"\n",(0,o.jsx)(n.p,{children:"Configure Orchestration modules within Spring AI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\nvar masking =\n    DpiMasking.anonymization()\n        .withEntities(DPIEntities.EMAIL, DPIEntities.ADDRESS, DPIEntities.LOCATION);\n\nvar opts = new OrchestrationChatOptions(config.withMaskingConfig(masking));\nvar prompt =\n    new Prompt(\n        \"Please write 'Hello World!' to me via email. My email address is foo.bar@baz.ai\",\n        opts);\n\nChatResponse response = client.call(prompt);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please\nfind ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,o.jsxs)(n.p,{children:["Apply ",(0,o.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/input-filtering",children:"input filtering"})," or ",(0,o.jsx)(n.a,{href:"https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/output-filtering",children:"output filtering"})," to the LLM call:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\n\nvar filterConfig = new AzureContentFilter()\n        .hate(AzureFilterThreshold.ALLOW_SAFE)\n        .selfHarm(AzureFilterThreshold.ALLOW_SAFE)\n        .sexual(AzureFilterThreshold.ALLOW_SAFE)\n        .violence(AzureFilterThreshold.ALLOW_SAFE);\n\n// Use config.withOutputFiltering(filterConfig) for output filtering\nvar opts = new OrchestrationChatOptions(config.withInputFiltering(filterConfig));\nvar prompt = new Prompt(\"'We shall spill blood tonight', said the operator in charge.\", opts);\n\nChatResponse response = client.call(prompt);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on the behaviour of input and output filters, check the ",(0,o.jsx)(n.a,{href:"../orchestration/chat-completion#filtering",children:"Filter Documentation for Orchestration"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"stream-chat-completion",children:"Stream chat completion"}),"\n",(0,o.jsx)(n.p,{children:"It's possible to pass a stream of chat completion delta elements, e.g. from the application backend\nto the frontend in real-time."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nPrompt prompt =\n    new Prompt(\n        "Can you give me the first 100 numbers of the Fibonacci sequence?", opts);\nFlux<ChatResponse> flux = client.stream(prompt);\n\n// also possible to keep only the chat completion text\nFlux<String> responseFlux =\n    flux.map(chatResponse -> chatResponse.getResult().getOutput().getContent());\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Note: A Spring endpoint can return ",(0,o.jsx)(n.code,{children:"Flux"})," instead of ",(0,o.jsx)(n.code,{children:"ResponseEntity"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"tool-calling",children:"Tool Calling"}),"\n",(0,o.jsx)(n.p,{children:"First define a function that will be called by the LLM:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'class WeatherMethod {\n  enum Unit {C,F}\n  record Request(String location, Unit unit) {}\n  record Response(double temp, Unit unit) {}\n\n  @Tool(description = "Get the weather in location")\n  Response getCurrentWeather(@ToolParam Request request) {\n    int temperature = request.location.hashCode() % 30;\n    return new Response(temperature, request.unit);\n  }\n}\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"What to consider:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Self-explanatory interfaces that avoid acronyms."}),"\n",(0,o.jsx)(n.li,{children:"Provide clear, humane readable error messages."}),"\n",(0,o.jsx)(n.li,{children:"Enriched data objects to avoid client-side data merging."}),"\n",(0,o.jsx)(n.li,{children:"Filter output to control size"}),"\n"]})]}),"\n",(0,o.jsx)(n.p,{children:"Then pass your tool to the model as follows."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\noptions.setToolCallbacks(List.of(ToolCallbacks.from(new WeatherMethod())));\n\nPrompt prompt = new Prompt("What is the weather in Potsdam and in Toulouse?", options);\n\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"chat-memory",children:"Chat Memory"}),"\n",(0,o.jsxs)(n.p,{children:["Create a Spring AI ",(0,o.jsx)(n.code,{children:"ChatClient"})," from our ",(0,o.jsx)(n.code,{children:"OrchestrationChatModel"})," and add a chat memory advisor like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\nOrchestrationModuleConfig config = new OrchestrationModuleConfig().withLlmConfig(GPT_4O_MINI);\nOrchestrationChatOptions opts = new OrchestrationChatOptions(config);\n\nvar memory = new InMemoryChatMemory();\nvar advisor = new MessageChatMemoryAdvisor(memory);\nvar cl = ChatClient.builder(client).defaultAdvisors(advisor).build();\n\nPrompt prompt1 = new Prompt("What is the capital of France?", defaultOptions);\nString content1 = cl.prompt(prompt1).call().content();\n// content1 is "Paris"\n\nPrompt prompt2 = new Prompt("And what is the typical food there?", defaultOptions);\nString content2 = cl.prompt(prompt2).call().content();\n// chat memory will remember that the user is inquiring about France.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,o.jsxs)(n.p,{children:["It is possible to force the response of the LLM to follow a certain JSON schema which is derived from a Java class.\nThe response can automatically be deserialized back into the Java class.\nThe following example uses the ",(0,o.jsx)(n.code,{children:"Translation"})," class:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public record Translation(\n  @JsonProperty(required = true) String translation,\n  @JsonProperty(required = true) String language) {}\n\nvar client = new OrchestrationChatModel();\n\nvar schema = ResponseJsonSchema.fromType(Translation.class);\nvar template = TemplateConfig.create().withJsonSchemaResponse(schema);\nvar options = new OrchestrationChatOptions(config.withTemplateConfig(template));\n\nvar prompt =\n  new Prompt(\"How do I say 'AI is going to revolutionize the world' in dutch?\", options);\n\nTranslation translation = client.call(prompt).entity(Translation.class);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Please find ",(0,o.jsx)(n.a,{href:"https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app/src/main/java/com/sap/ai/sdk/app/services/SpringAiOrchestrationService.java",children:"an example in our Spring Boot application"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on setting a response format, check the corresponding ",(0,o.jsx)(n.a,{href:"../orchestration/chat-completion#response-format",children:"Documentation for Orchestration"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"templates-from-prompt-registry",children:"Templates from Prompt Registry"}),"\n",(0,o.jsx)(n.p,{children:"You can use prompt templates stored in a prompt registry in your Spring AI application."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ChatModel client = new OrchestrationChatModel();\n\nvar template = TemplateConfig.reference().byScenario("scenario").name("name").version("1.0.0");\nvar options = new OrchestrationChatOptions(config.withTemplateConfig(template));\nvar prompt = new Prompt(List.of(), options);\n\nChatResponse response = client.call(prompt);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on prompt registry, we refer to the corresponding ",(0,o.jsx)(n.a,{href:"../ai-core/prompt-registry",children:"documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);